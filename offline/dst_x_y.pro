pro dst_x_y, info, str, psf_str, loud

; NAME:
;	dst_x_y
; PURPOSE:
;	By means the correlation product computed with dst_em_fft routine it wil return the 
;	position for primary saturated pixels, bloomed pixels, diffraction fringes.
; EXPLANATION:
;	Selecting two regions of the image (I_1 with intensities > 15000 and the I_2 with 
;	intensities < 10000) the correlation into I_1 is computed using I_2 as data. Note that 
;	in our formulation the correlation product correspond to the first iteration of 
;	dst_em_fft procedure. Convolving the result of the cross-correlation with the dispersion
;	core of the PSF we recognize the primary saturation site S (the one with intensity > saturation 
;	level) and as a consequence the I_2 pixels that are not in S are the bloomed ones B.
;	Moreover, considering the support of the convolution product between mask_s, defined as
;	mask_s[s] = 1. and 0 elsewhere, and the psf diffraction component is possible to find out
;	the diffraction fringes directly generated by the primary saturation site.
; CALLING SEQUENCE:
;	dst_x_y, str, psf_str 
; INPUTS:
;	str		  =	dst_str global structure for the desaturation routine.	
;	psf_str	  = structure containing all the psf components, diffraction, dispersion and 
;				the complete one. This structure is returned as output from dst_psf_gen.pro
;				routine.	
; OUTPUT:
;	str.s		= primary saturated pixels position
;	str.z		= flaring pixels (not saturated pixels, with an high intensity avoided by the method)
;	str.g		= diffraction fringes pixels position 
;	str.b		= bloomed pixels positions
;	str.ns		= number of saturated pixel
;	str.sat_lev = saturation intensity level 
; CALLS:
;	CALLED BY:
;		DESATURATION
;	

	cpsf	= psf_str.cpsf	
	im 		= *str.im
	bkg		= *str.bg
	bg_bkup	= *str.bg_bkup
	
	;;; Classify the map intensity in tree groups (saturation / fringes / pure background emission) 
	;;; Possible other way to do that??? 
	ind = where(im ge 1)

	I_1	= where( im gt 15000 )
	I_2 = where( im lt 10000 )

	; data selection mask for correlation 
	mask = im * 0. & mask[I_1] = 1
	corr_fring = where(convolve( mask, psf_str.cpsf ) ge 1.e-3 * max(cpsf))
	corr_g = where((histogram(corr_fring, min = 0, max=size(/n_e,im)) + $
				    histogram(I_2, min = 0, max=size(/n_e,im))) eq 2)
			
	in  = {s   		: ptr_new(I_1)			,$
		   g   		: ptr_new(corr_g)			,$
		   im  		: ptr_new(im)				,$
		   bg  		: ptr_new(bkg)  			,$
		   bg_bkup	: ptr_new(bg_bkup) 		,$
		   x   		: ptr_new(/allocate_heap)   ,$
		   y   		: ptr_new(/allocate_heap) 	,$
		   c_exp	: ptr_new(/allocate_heap) 	,$
		   c_stat	: 0							,$
		   it		: 1							,$
		   lev		: 1 						}

	dst_em_fft, in, psf_str.cpsf, it=it, level=level 
	c = im *0. & c[I_1] = *in.x	
	
	;;; SATURATED PIXEL POSITION
	c1 = sigma_filter( c, 5, n_sigma = 1, /iterate) 		;;;Necessary to avoid artifacts in the 
	cc_bg = bkg * 0 & cc_bg[I_1] = bkg[I_1]
	cc = (convolve(c1,psf_str.opsf)) + cc_bg				;;;correlation map

	
	print, 'Maximum correlation map:', max(cc)
	s = max(cc) gt str.sat_lev ? where(cc ge str.sat_lev, ns) : where(cc ge 0.25*max(cc), ns)
	;s = where(cc ge 0.2*max(cc), ns)
	
	mask_s = im * 0. & mask_s[s] = 1.
	fwd_ind = where(convolve( mask_s, psf_str.cpsf ) ge 1.e-3 * max(cpsf))

	;;; ...flaring intense part of the image (not saturated) 
	mask_z = im * 0. & mask_z[where( im gt 10000 )] = 1.
	mask_z = convolve(mask_z,psf_str.opsf)>0
	z = where(mask_z gt min(psf_str.opsf[where(psf_str.opsf gt 0)]))

	;;; DATA PIXEL POSITION
	g = where(histogram(I_2, min = 0, max=size(/n_e, im)) + $
			  histogram(fwd_ind, min = 0, max=size(/n_e, im)) - $
			  histogram(z, min=0,max=size(/n_e, im)) eq 2.)
	
	;;; BLOOMED PIXEL POSITION	
	b = where(histogram(I_1	, min = 0, max=size(/n_e, im)) - $
			  histogram(s	, min = 0, max=size(/n_e, im)) eq 1.)
			  
	mask_g = im * 0. & mask_g[g] = 1.

	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PLOT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	if loud eq 1 then begin 
		tt = im*0 & tt[I_2] = 1
		index2map, info ,((im-bkg)*tt)^0.3, map 		
		plot_map, map, /positive, /square ,title = 'Core Masked Bkg-subtracted data', thick=1.5
	
		index2map, info ,cc^0.3, map 		
		plot_map, map, /positive, /square ,title = 'Correlation', thick=1.5
	endif
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


	str.s = ptr_new(s) 
	str.z = ptr_new(z)
	str.g = ptr_new(g)
	str.b = ptr_new(b)
	str.ns = ns

end
